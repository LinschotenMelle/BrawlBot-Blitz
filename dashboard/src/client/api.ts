/* tslint:disable */
/* eslint-disable */
/**
 * BrawlBot Blitz API
 * Swagger Example API API description
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BrawlStarsEventDto
 */
export interface BrawlStarsEventDto {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsEventDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsEventDto
     */
    'mode': string;
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsEventDto
     */
    'map': string;
}
/**
 * 
 * @export
 * @interface BrawlStarsMapDto
 */
export interface BrawlStarsMapDto {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsMapDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsMapDto
     */
    'endTime': string;
    /**
     * 
     * @type {number}
     * @memberof BrawlStarsMapDto
     */
    'slotId': number;
    /**
     * 
     * @type {BrawlStarsEventDto}
     * @memberof BrawlStarsMapDto
     */
    'event': BrawlStarsEventDto;
}
/**
 * 
 * @export
 * @interface BrawlStarsUserDto
 */
export interface BrawlStarsUserDto {
    /**
     * 
     * @type {number}
     * @memberof BrawlStarsUserDto
     */
    'tag': number;
}
/**
 * 
 * @export
 * @interface BrawlerDto
 */
export interface BrawlerDto {
    /**
     * 
     * @type {number}
     * @memberof BrawlerDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof BrawlerDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof BrawlerDto
     */
    'power': number;
    /**
     * 
     * @type {number}
     * @memberof BrawlerDto
     */
    'rank': number;
    /**
     * 
     * @type {number}
     * @memberof BrawlerDto
     */
    'trophies': number;
    /**
     * 
     * @type {number}
     * @memberof BrawlerDto
     */
    'highestTrophies': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BrawlerDto
     */
    'gears': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BrawlerDto
     */
    'starPowers': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BrawlerDto
     */
    'gadgets': Array<string>;
}
/**
 * 
 * @export
 * @interface ClubDto
 */
export interface ClubDto {
    /**
     * 
     * @type {string}
     * @memberof ClubDto
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ClubDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ClubDto
     */
    'badgeId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClubDto
     */
    'trophies'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClubDto
     */
    'rank'?: number;
    /**
     * 
     * @type {number}
     * @memberof ClubDto
     */
    'memberCount'?: number;
}
/**
 * 
 * @export
 * @interface CreateImageDto
 */
export interface CreateImageDto {
    /**
     * 
     * @type {string}
     * @memberof CreateImageDto
     */
    'prompt': string;
}
/**
 * 
 * @export
 * @interface CreateMemberCountDto
 */
export interface CreateMemberCountDto {
    /**
     * 
     * @type {string}
     * @memberof CreateMemberCountDto
     */
    'channelId': string;
}
/**
 * 
 * @export
 * @interface CreateYoutubeChannelDto
 */
export interface CreateYoutubeChannelDto {
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'guildId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'apiKey': string;
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'channelId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'guildChannelId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'roleId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateYoutubeChannelDto
     */
    'latestVideoDateTime': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateYoutubeChannelDto
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface GuildChannelDto
 */
export interface GuildChannelDto {
    /**
     * 
     * @type {string}
     * @memberof GuildChannelDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GuildChannelDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof GuildChannelDto
     */
    'type': number;
}
/**
 * 
 * @export
 * @interface GuildDto
 */
export interface GuildDto {
    /**
     * 
     * @type {string}
     * @memberof GuildDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GuildDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GuildDto
     */
    'icon': string;
    /**
     * 
     * @type {string}
     * @memberof GuildDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof GuildDto
     */
    'splash': string;
    /**
     * 
     * @type {boolean}
     * @memberof GuildDto
     */
    'owner': boolean;
    /**
     * 
     * @type {number}
     * @memberof GuildDto
     */
    'permissions': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GuildDto
     */
    'features': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof GuildDto
     */
    'isActive': boolean;
    /**
     * 
     * @type {Array<RoleDto>}
     * @memberof GuildDto
     */
    'roles': Array<RoleDto>;
}
/**
 * 
 * @export
 * @interface GuildMemberCountDto
 */
export interface GuildMemberCountDto {
    /**
     * 
     * @type {string}
     * @memberof GuildMemberCountDto
     */
    'guildId': string;
    /**
     * 
     * @type {string}
     * @memberof GuildMemberCountDto
     */
    'channelId': string;
}
/**
 * 
 * @export
 * @interface IconDto
 */
export interface IconDto {
    /**
     * 
     * @type {number}
     * @memberof IconDto
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface ImageDto
 */
export interface ImageDto {
    /**
     * 
     * @type {string}
     * @memberof ImageDto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PartialGuildDto
 */
export interface PartialGuildDto {
    /**
     * 
     * @type {string}
     * @memberof PartialGuildDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PartialGuildDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PartialGuildDto
     */
    'icon': string;
    /**
     * 
     * @type {boolean}
     * @memberof PartialGuildDto
     */
    'owner': boolean;
    /**
     * 
     * @type {number}
     * @memberof PartialGuildDto
     */
    'permissions': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PartialGuildDto
     */
    'features': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PartialGuildDto
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface PlayerDto
 */
export interface PlayerDto {
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    'nameColor': string;
    /**
     * 
     * @type {IconDto}
     * @memberof PlayerDto
     */
    'icon': IconDto;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'trophies': number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'highestTrophies'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'highestPowerPlayPoints'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'expLevel'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'expPoints'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerDto
     */
    'isQualifiedFromChampionshipChallenge'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    '3vs3Victories'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'soloVictories'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'duoVictories'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'bestRoboRumbleTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    'bestTimeAsBigBrawler'?: number;
    /**
     * 
     * @type {ClubDto}
     * @memberof PlayerDto
     */
    'club'?: ClubDto;
    /**
     * 
     * @type {Array<BrawlerDto>}
     * @memberof PlayerDto
     */
    'brawlers'?: Array<BrawlerDto>;
}
/**
 * 
 * @export
 * @interface RoleDto
 */
export interface RoleDto {
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RoleDto
     */
    'permissions': string;
    /**
     * 
     * @type {number}
     * @memberof RoleDto
     */
    'color': number;
}
/**
 * 
 * @export
 * @interface UpdateWalletBalanceDto
 */
export interface UpdateWalletBalanceDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateWalletBalanceDto
     */
    'coins': number;
    /**
     * 
     * @type {number}
     * @memberof UpdateWalletBalanceDto
     */
    'powerpoints': number;
}
/**
 * 
 * @export
 * @interface UpsertBrawlStarsUserDto
 */
export interface UpsertBrawlStarsUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpsertBrawlStarsUserDto
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof UpsertBrawlStarsUserDto
     */
    'tag': string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'discordId': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'discriminator': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'avatar': string;
}
/**
 * 
 * @export
 * @interface WalletCollectableDto
 */
export interface WalletCollectableDto {
    /**
     * 
     * @type {string}
     * @memberof WalletCollectableDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WalletCollectableDto
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof WalletCollectableDto
     */
    'price': number;
    /**
     * 
     * @type {string}
     * @memberof WalletCollectableDto
     */
    'imageUrl': string;
}
/**
 * 
 * @export
 * @interface WalletDto
 */
export interface WalletDto {
    /**
     * 
     * @type {string}
     * @memberof WalletDto
     */
    'userId': string;
    /**
     * 
     * @type {number}
     * @memberof WalletDto
     */
    'coins': number;
    /**
     * 
     * @type {number}
     * @memberof WalletDto
     */
    'powerpoints': number;
    /**
     * 
     * @type {Array<WalletCollectableDto>}
     * @memberof WalletDto
     */
    'collectables': Array<WalletCollectableDto>;
}
/**
 * 
 * @export
 * @interface WelcomeMessageDto
 */
export interface WelcomeMessageDto {
    /**
     * 
     * @type {string}
     * @memberof WelcomeMessageDto
     */
    'guildId': string;
    /**
     * 
     * @type {string}
     * @memberof WelcomeMessageDto
     */
    'channelId': string;
}
/**
 * 
 * @export
 * @interface YoutubeChannelDto
 */
export interface YoutubeChannelDto {
    /**
     * 
     * @type {string}
     * @memberof YoutubeChannelDto
     */
    'guildId': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeChannelDto
     */
    'guildChannelId': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeChannelDto
     */
    'latestVideoDateTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeChannelDto
     */
    'roleId': string;
    /**
     * 
     * @type {boolean}
     * @memberof YoutubeChannelDto
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface YoutubeVideoDto
 */
export interface YoutubeVideoDto {
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'publishedAt': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'channelTitle': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'channelId': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'videoTitle': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'videoUrl': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'thumbnailUrl': string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeVideoDto
     */
    'description'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRedirect: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/redirect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRedirect(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRedirect(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogin(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerMe(options?: any): AxiosPromise<UserDto> {
            return localVarFp.authControllerMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRedirect(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerRedirect(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerMe(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRedirect(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRedirect(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BrawlStarsApi - axios parameter creator
 * @export
 */
export const BrawlStarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetBrawlers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/brawl-stars/brawlers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetClubs: async (countryCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('brawlStarsControllerGetClubs', 'countryCode', countryCode)
            const localVarPath = `/api/brawl-stars/clubs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetPlayers: async (countryCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('brawlStarsControllerGetPlayers', 'countryCode', countryCode)
            const localVarPath = `/api/brawl-stars/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetProfile: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('brawlStarsControllerGetProfile', 'userId', userId)
            const localVarPath = `/api/brawl-stars/profile/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetProfileByTag: async (tag: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('brawlStarsControllerGetProfileByTag', 'tag', tag)
            const localVarPath = `/api/brawl-stars/profile/{tag}`
                .replace(`{${"tag"}}`, encodeURIComponent(String(tag)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetRotation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/brawl-stars/rotation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerSaveProfile: async (upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertBrawlStarsUserDto' is not null or undefined
            assertParamExists('brawlStarsControllerSaveProfile', 'upsertBrawlStarsUserDto', upsertBrawlStarsUserDto)
            const localVarPath = `/api/brawl-stars/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertBrawlStarsUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerUpdateProfile: async (upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'upsertBrawlStarsUserDto' is not null or undefined
            assertParamExists('brawlStarsControllerUpdateProfile', 'upsertBrawlStarsUserDto', upsertBrawlStarsUserDto)
            const localVarPath = `/api/brawl-stars/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(upsertBrawlStarsUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrawlStarsApi - functional programming interface
 * @export
 */
export const BrawlStarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrawlStarsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetBrawlers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrawlerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetBrawlers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetClubs(countryCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClubDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetClubs(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetPlayers(countryCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetPlayers(countryCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetProfile(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetProfile(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetProfileByTag(tag: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetProfileByTag(tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerGetRotation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrawlStarsMapDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerGetRotation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerSaveProfile(upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrawlStarsUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerSaveProfile(upsertBrawlStarsUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brawlStarsControllerUpdateProfile(upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrawlStarsUserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brawlStarsControllerUpdateProfile(upsertBrawlStarsUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrawlStarsApi - factory interface
 * @export
 */
export const BrawlStarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrawlStarsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetBrawlers(options?: any): AxiosPromise<Array<BrawlerDto>> {
            return localVarFp.brawlStarsControllerGetBrawlers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetClubs(countryCode: string, options?: any): AxiosPromise<Array<ClubDto>> {
            return localVarFp.brawlStarsControllerGetClubs(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} countryCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetPlayers(countryCode: string, options?: any): AxiosPromise<Array<PlayerDto>> {
            return localVarFp.brawlStarsControllerGetPlayers(countryCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetProfile(userId: string, options?: any): AxiosPromise<PlayerDto> {
            return localVarFp.brawlStarsControllerGetProfile(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetProfileByTag(tag: string, options?: any): AxiosPromise<PlayerDto> {
            return localVarFp.brawlStarsControllerGetProfileByTag(tag, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerGetRotation(options?: any): AxiosPromise<Array<BrawlStarsMapDto>> {
            return localVarFp.brawlStarsControllerGetRotation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerSaveProfile(upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options?: any): AxiosPromise<BrawlStarsUserDto> {
            return localVarFp.brawlStarsControllerSaveProfile(upsertBrawlStarsUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpsertBrawlStarsUserDto} upsertBrawlStarsUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brawlStarsControllerUpdateProfile(upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto, options?: any): AxiosPromise<BrawlStarsUserDto> {
            return localVarFp.brawlStarsControllerUpdateProfile(upsertBrawlStarsUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for brawlStarsControllerGetClubs operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerGetClubsRequest
 */
export interface BrawlStarsApiBrawlStarsControllerGetClubsRequest {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsApiBrawlStarsControllerGetClubs
     */
    readonly countryCode: string
}

/**
 * Request parameters for brawlStarsControllerGetPlayers operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerGetPlayersRequest
 */
export interface BrawlStarsApiBrawlStarsControllerGetPlayersRequest {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsApiBrawlStarsControllerGetPlayers
     */
    readonly countryCode: string
}

/**
 * Request parameters for brawlStarsControllerGetProfile operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerGetProfileRequest
 */
export interface BrawlStarsApiBrawlStarsControllerGetProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsApiBrawlStarsControllerGetProfile
     */
    readonly userId: string
}

/**
 * Request parameters for brawlStarsControllerGetProfileByTag operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerGetProfileByTagRequest
 */
export interface BrawlStarsApiBrawlStarsControllerGetProfileByTagRequest {
    /**
     * 
     * @type {string}
     * @memberof BrawlStarsApiBrawlStarsControllerGetProfileByTag
     */
    readonly tag: string
}

/**
 * Request parameters for brawlStarsControllerSaveProfile operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerSaveProfileRequest
 */
export interface BrawlStarsApiBrawlStarsControllerSaveProfileRequest {
    /**
     * 
     * @type {UpsertBrawlStarsUserDto}
     * @memberof BrawlStarsApiBrawlStarsControllerSaveProfile
     */
    readonly upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto
}

/**
 * Request parameters for brawlStarsControllerUpdateProfile operation in BrawlStarsApi.
 * @export
 * @interface BrawlStarsApiBrawlStarsControllerUpdateProfileRequest
 */
export interface BrawlStarsApiBrawlStarsControllerUpdateProfileRequest {
    /**
     * 
     * @type {UpsertBrawlStarsUserDto}
     * @memberof BrawlStarsApiBrawlStarsControllerUpdateProfile
     */
    readonly upsertBrawlStarsUserDto: UpsertBrawlStarsUserDto
}

/**
 * BrawlStarsApi - object-oriented interface
 * @export
 * @class BrawlStarsApi
 * @extends {BaseAPI}
 */
export class BrawlStarsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetBrawlers(options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetBrawlers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerGetClubsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetClubs(requestParameters: BrawlStarsApiBrawlStarsControllerGetClubsRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetClubs(requestParameters.countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerGetPlayersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetPlayers(requestParameters: BrawlStarsApiBrawlStarsControllerGetPlayersRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetPlayers(requestParameters.countryCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerGetProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetProfile(requestParameters: BrawlStarsApiBrawlStarsControllerGetProfileRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerGetProfileByTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetProfileByTag(requestParameters: BrawlStarsApiBrawlStarsControllerGetProfileByTagRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetProfileByTag(requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerGetRotation(options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerGetRotation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerSaveProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerSaveProfile(requestParameters: BrawlStarsApiBrawlStarsControllerSaveProfileRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerSaveProfile(requestParameters.upsertBrawlStarsUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrawlStarsApiBrawlStarsControllerUpdateProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrawlStarsApi
     */
    public brawlStarsControllerUpdateProfile(requestParameters: BrawlStarsApiBrawlStarsControllerUpdateProfileRequest, options?: AxiosRequestConfig) {
        return BrawlStarsApiFp(this.configuration).brawlStarsControllerUpdateProfile(requestParameters.upsertBrawlStarsUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DiscordApi - axios parameter creator
 * @export
 */
export const DiscordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuildChannels: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('discordControllerGetGuildChannels', 'guildId', guildId)
            const localVarPath = `/api/discord/guilds/{guildId}/channels`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuildDetails: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('discordControllerGetGuildDetails', 'guildId', guildId)
            const localVarPath = `/api/discord/guilds/{guildId}`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuilds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/discord/guilds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetMemberCount: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('discordControllerGetMemberCount', 'guildId', guildId)
            const localVarPath = `/api/discord/guilds/{guildId}/member-count`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetWelcomeMessage: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('discordControllerGetWelcomeMessage', 'guildId', guildId)
            const localVarPath = `/api/discord/guilds/{guildId}/welcome-message`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {CreateMemberCountDto} createMemberCountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerPostMemberCount: async (guildId: string, createMemberCountDto: CreateMemberCountDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('discordControllerPostMemberCount', 'guildId', guildId)
            // verify required parameter 'createMemberCountDto' is not null or undefined
            assertParamExists('discordControllerPostMemberCount', 'createMemberCountDto', createMemberCountDto)
            const localVarPath = `/api/discord/guilds/{guildId}/member-count`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemberCountDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DiscordApi - functional programming interface
 * @export
 */
export const DiscordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DiscordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerGetGuildChannels(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuildChannelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerGetGuildChannels(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerGetGuildDetails(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuildDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerGetGuildDetails(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerGetGuilds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PartialGuildDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerGetGuilds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerGetMemberCount(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuildMemberCountDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerGetMemberCount(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerGetWelcomeMessage(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WelcomeMessageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerGetWelcomeMessage(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {CreateMemberCountDto} createMemberCountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discordControllerPostMemberCount(guildId: string, createMemberCountDto: CreateMemberCountDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuildMemberCountDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discordControllerPostMemberCount(guildId, createMemberCountDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DiscordApi - factory interface
 * @export
 */
export const DiscordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DiscordApiFp(configuration)
    return {
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuildChannels(guildId: string, options?: any): AxiosPromise<Array<GuildChannelDto>> {
            return localVarFp.discordControllerGetGuildChannels(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuildDetails(guildId: string, options?: any): AxiosPromise<GuildDto> {
            return localVarFp.discordControllerGetGuildDetails(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetGuilds(options?: any): AxiosPromise<Array<PartialGuildDto>> {
            return localVarFp.discordControllerGetGuilds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetMemberCount(guildId: string, options?: any): AxiosPromise<GuildMemberCountDto> {
            return localVarFp.discordControllerGetMemberCount(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerGetWelcomeMessage(guildId: string, options?: any): AxiosPromise<WelcomeMessageDto> {
            return localVarFp.discordControllerGetWelcomeMessage(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {CreateMemberCountDto} createMemberCountDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discordControllerPostMemberCount(guildId: string, createMemberCountDto: CreateMemberCountDto, options?: any): AxiosPromise<GuildMemberCountDto> {
            return localVarFp.discordControllerPostMemberCount(guildId, createMemberCountDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for discordControllerGetGuildChannels operation in DiscordApi.
 * @export
 * @interface DiscordApiDiscordControllerGetGuildChannelsRequest
 */
export interface DiscordApiDiscordControllerGetGuildChannelsRequest {
    /**
     * 
     * @type {string}
     * @memberof DiscordApiDiscordControllerGetGuildChannels
     */
    readonly guildId: string
}

/**
 * Request parameters for discordControllerGetGuildDetails operation in DiscordApi.
 * @export
 * @interface DiscordApiDiscordControllerGetGuildDetailsRequest
 */
export interface DiscordApiDiscordControllerGetGuildDetailsRequest {
    /**
     * 
     * @type {string}
     * @memberof DiscordApiDiscordControllerGetGuildDetails
     */
    readonly guildId: string
}

/**
 * Request parameters for discordControllerGetMemberCount operation in DiscordApi.
 * @export
 * @interface DiscordApiDiscordControllerGetMemberCountRequest
 */
export interface DiscordApiDiscordControllerGetMemberCountRequest {
    /**
     * 
     * @type {string}
     * @memberof DiscordApiDiscordControllerGetMemberCount
     */
    readonly guildId: string
}

/**
 * Request parameters for discordControllerGetWelcomeMessage operation in DiscordApi.
 * @export
 * @interface DiscordApiDiscordControllerGetWelcomeMessageRequest
 */
export interface DiscordApiDiscordControllerGetWelcomeMessageRequest {
    /**
     * 
     * @type {string}
     * @memberof DiscordApiDiscordControllerGetWelcomeMessage
     */
    readonly guildId: string
}

/**
 * Request parameters for discordControllerPostMemberCount operation in DiscordApi.
 * @export
 * @interface DiscordApiDiscordControllerPostMemberCountRequest
 */
export interface DiscordApiDiscordControllerPostMemberCountRequest {
    /**
     * 
     * @type {string}
     * @memberof DiscordApiDiscordControllerPostMemberCount
     */
    readonly guildId: string

    /**
     * 
     * @type {CreateMemberCountDto}
     * @memberof DiscordApiDiscordControllerPostMemberCount
     */
    readonly createMemberCountDto: CreateMemberCountDto
}

/**
 * DiscordApi - object-oriented interface
 * @export
 * @class DiscordApi
 * @extends {BaseAPI}
 */
export class DiscordApi extends BaseAPI {
    /**
     * 
     * @param {DiscordApiDiscordControllerGetGuildChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerGetGuildChannels(requestParameters: DiscordApiDiscordControllerGetGuildChannelsRequest, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerGetGuildChannels(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiscordApiDiscordControllerGetGuildDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerGetGuildDetails(requestParameters: DiscordApiDiscordControllerGetGuildDetailsRequest, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerGetGuildDetails(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerGetGuilds(options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerGetGuilds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiscordApiDiscordControllerGetMemberCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerGetMemberCount(requestParameters: DiscordApiDiscordControllerGetMemberCountRequest, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerGetMemberCount(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiscordApiDiscordControllerGetWelcomeMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerGetWelcomeMessage(requestParameters: DiscordApiDiscordControllerGetWelcomeMessageRequest, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerGetWelcomeMessage(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DiscordApiDiscordControllerPostMemberCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiscordApi
     */
    public discordControllerPostMemberCount(requestParameters: DiscordApiDiscordControllerPostMemberCountRequest, options?: AxiosRequestConfig) {
        return DiscordApiFp(this.configuration).discordControllerPostMemberCount(requestParameters.guildId, requestParameters.createMemberCountDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OpenAIApi - axios parameter creator
 * @export
 */
export const OpenAIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateImageDto} createImageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openaiControllerCreateImage: async (createImageDto: CreateImageDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createImageDto' is not null or undefined
            assertParamExists('openaiControllerCreateImage', 'createImageDto', createImageDto)
            const localVarPath = `/api/openai/generate-image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createImageDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenAIApi - functional programming interface
 * @export
 */
export const OpenAIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenAIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateImageDto} createImageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openaiControllerCreateImage(createImageDto: CreateImageDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openaiControllerCreateImage(createImageDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OpenAIApi - factory interface
 * @export
 */
export const OpenAIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenAIApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateImageDto} createImageDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openaiControllerCreateImage(createImageDto: CreateImageDto, options?: any): AxiosPromise<ImageDto> {
            return localVarFp.openaiControllerCreateImage(createImageDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for openaiControllerCreateImage operation in OpenAIApi.
 * @export
 * @interface OpenAIApiOpenaiControllerCreateImageRequest
 */
export interface OpenAIApiOpenaiControllerCreateImageRequest {
    /**
     * 
     * @type {CreateImageDto}
     * @memberof OpenAIApiOpenaiControllerCreateImage
     */
    readonly createImageDto: CreateImageDto
}

/**
 * OpenAIApi - object-oriented interface
 * @export
 * @class OpenAIApi
 * @extends {BaseAPI}
 */
export class OpenAIApi extends BaseAPI {
    /**
     * 
     * @param {OpenAIApiOpenaiControllerCreateImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenAIApi
     */
    public openaiControllerCreateImage(requestParameters: OpenAIApiOpenaiControllerCreateImageRequest, options?: AxiosRequestConfig) {
        return OpenAIApiFp(this.configuration).openaiControllerCreateImage(requestParameters.createImageDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetWalletBalance: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerGetWalletBalance', 'userId', userId)
            const localVarPath = `/api/user/{userId}/balance`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateWalletBalanceDto} updateWalletBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateWalletBalance: async (userId: string, updateWalletBalanceDto: UpdateWalletBalanceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerUpdateWalletBalance', 'userId', userId)
            // verify required parameter 'updateWalletBalanceDto' is not null or undefined
            assertParamExists('userControllerUpdateWalletBalance', 'updateWalletBalanceDto', updateWalletBalanceDto)
            const localVarPath = `/api/user/{userId}/balance`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateWalletBalanceDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetWalletBalance(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetWalletBalance(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateWalletBalanceDto} updateWalletBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdateWalletBalance(userId: string, updateWalletBalanceDto: UpdateWalletBalanceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdateWalletBalance(userId, updateWalletBalanceDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetWalletBalance(userId: string, options?: any): AxiosPromise<WalletDto> {
            return localVarFp.userControllerGetWalletBalance(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userId 
         * @param {UpdateWalletBalanceDto} updateWalletBalanceDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdateWalletBalance(userId: string, updateWalletBalanceDto: UpdateWalletBalanceDto, options?: any): AxiosPromise<WalletDto> {
            return localVarFp.userControllerUpdateWalletBalance(userId, updateWalletBalanceDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userControllerGetWalletBalance operation in UserApi.
 * @export
 * @interface UserApiUserControllerGetWalletBalanceRequest
 */
export interface UserApiUserControllerGetWalletBalanceRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiUserControllerGetWalletBalance
     */
    readonly userId: string
}

/**
 * Request parameters for userControllerUpdateWalletBalance operation in UserApi.
 * @export
 * @interface UserApiUserControllerUpdateWalletBalanceRequest
 */
export interface UserApiUserControllerUpdateWalletBalanceRequest {
    /**
     * 
     * @type {string}
     * @memberof UserApiUserControllerUpdateWalletBalance
     */
    readonly userId: string

    /**
     * 
     * @type {UpdateWalletBalanceDto}
     * @memberof UserApiUserControllerUpdateWalletBalance
     */
    readonly updateWalletBalanceDto: UpdateWalletBalanceDto
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {UserApiUserControllerGetWalletBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetWalletBalance(requestParameters: UserApiUserControllerGetWalletBalanceRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerGetWalletBalance(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserApiUserControllerUpdateWalletBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerUpdateWalletBalance(requestParameters: UserApiUserControllerUpdateWalletBalanceRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userControllerUpdateWalletBalance(requestParameters.userId, requestParameters.updateWalletBalanceDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * YouTubeApi - axios parameter creator
 * @export
 */
export const YouTubeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateYoutubeChannelDto} createYoutubeChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerCreateChannel: async (createYoutubeChannelDto: CreateYoutubeChannelDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createYoutubeChannelDto' is not null or undefined
            assertParamExists('youtubeControllerCreateChannel', 'createYoutubeChannelDto', createYoutubeChannelDto)
            const localVarPath = `/api/youtube`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createYoutubeChannelDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerGetChannel: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('youtubeControllerGetChannel', 'guildId', guildId)
            const localVarPath = `/api/youtube/{guildId}`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerGetChannels: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/youtube/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerSearchLatestVideo: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('youtubeControllerSearchLatestVideo', 'guildId', guildId)
            const localVarPath = `/api/youtube/{guildId}/search-latest-video`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerUpdateChannel: async (guildId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guildId' is not null or undefined
            assertParamExists('youtubeControllerUpdateChannel', 'guildId', guildId)
            const localVarPath = `/api/youtube/channels/{guildId}`
                .replace(`{${"guildId"}}`, encodeURIComponent(String(guildId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * YouTubeApi - functional programming interface
 * @export
 */
export const YouTubeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = YouTubeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateYoutubeChannelDto} createYoutubeChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async youtubeControllerCreateChannel(createYoutubeChannelDto: CreateYoutubeChannelDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<YoutubeChannelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.youtubeControllerCreateChannel(createYoutubeChannelDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async youtubeControllerGetChannel(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<YoutubeChannelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.youtubeControllerGetChannel(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async youtubeControllerGetChannels(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<YoutubeChannelDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.youtubeControllerGetChannels(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async youtubeControllerSearchLatestVideo(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<YoutubeVideoDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.youtubeControllerSearchLatestVideo(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async youtubeControllerUpdateChannel(guildId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.youtubeControllerUpdateChannel(guildId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * YouTubeApi - factory interface
 * @export
 */
export const YouTubeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = YouTubeApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateYoutubeChannelDto} createYoutubeChannelDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerCreateChannel(createYoutubeChannelDto: CreateYoutubeChannelDto, options?: any): AxiosPromise<YoutubeChannelDto> {
            return localVarFp.youtubeControllerCreateChannel(createYoutubeChannelDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerGetChannel(guildId: string, options?: any): AxiosPromise<YoutubeChannelDto> {
            return localVarFp.youtubeControllerGetChannel(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerGetChannels(options?: any): AxiosPromise<Array<YoutubeChannelDto>> {
            return localVarFp.youtubeControllerGetChannels(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerSearchLatestVideo(guildId: string, options?: any): AxiosPromise<YoutubeVideoDto> {
            return localVarFp.youtubeControllerSearchLatestVideo(guildId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guildId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        youtubeControllerUpdateChannel(guildId: string, options?: any): AxiosPromise<void> {
            return localVarFp.youtubeControllerUpdateChannel(guildId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for youtubeControllerCreateChannel operation in YouTubeApi.
 * @export
 * @interface YouTubeApiYoutubeControllerCreateChannelRequest
 */
export interface YouTubeApiYoutubeControllerCreateChannelRequest {
    /**
     * 
     * @type {CreateYoutubeChannelDto}
     * @memberof YouTubeApiYoutubeControllerCreateChannel
     */
    readonly createYoutubeChannelDto: CreateYoutubeChannelDto
}

/**
 * Request parameters for youtubeControllerGetChannel operation in YouTubeApi.
 * @export
 * @interface YouTubeApiYoutubeControllerGetChannelRequest
 */
export interface YouTubeApiYoutubeControllerGetChannelRequest {
    /**
     * 
     * @type {string}
     * @memberof YouTubeApiYoutubeControllerGetChannel
     */
    readonly guildId: string
}

/**
 * Request parameters for youtubeControllerSearchLatestVideo operation in YouTubeApi.
 * @export
 * @interface YouTubeApiYoutubeControllerSearchLatestVideoRequest
 */
export interface YouTubeApiYoutubeControllerSearchLatestVideoRequest {
    /**
     * 
     * @type {string}
     * @memberof YouTubeApiYoutubeControllerSearchLatestVideo
     */
    readonly guildId: string
}

/**
 * Request parameters for youtubeControllerUpdateChannel operation in YouTubeApi.
 * @export
 * @interface YouTubeApiYoutubeControllerUpdateChannelRequest
 */
export interface YouTubeApiYoutubeControllerUpdateChannelRequest {
    /**
     * 
     * @type {string}
     * @memberof YouTubeApiYoutubeControllerUpdateChannel
     */
    readonly guildId: string
}

/**
 * YouTubeApi - object-oriented interface
 * @export
 * @class YouTubeApi
 * @extends {BaseAPI}
 */
export class YouTubeApi extends BaseAPI {
    /**
     * 
     * @param {YouTubeApiYoutubeControllerCreateChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeApi
     */
    public youtubeControllerCreateChannel(requestParameters: YouTubeApiYoutubeControllerCreateChannelRequest, options?: AxiosRequestConfig) {
        return YouTubeApiFp(this.configuration).youtubeControllerCreateChannel(requestParameters.createYoutubeChannelDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {YouTubeApiYoutubeControllerGetChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeApi
     */
    public youtubeControllerGetChannel(requestParameters: YouTubeApiYoutubeControllerGetChannelRequest, options?: AxiosRequestConfig) {
        return YouTubeApiFp(this.configuration).youtubeControllerGetChannel(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeApi
     */
    public youtubeControllerGetChannels(options?: AxiosRequestConfig) {
        return YouTubeApiFp(this.configuration).youtubeControllerGetChannels(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {YouTubeApiYoutubeControllerSearchLatestVideoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeApi
     */
    public youtubeControllerSearchLatestVideo(requestParameters: YouTubeApiYoutubeControllerSearchLatestVideoRequest, options?: AxiosRequestConfig) {
        return YouTubeApiFp(this.configuration).youtubeControllerSearchLatestVideo(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {YouTubeApiYoutubeControllerUpdateChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeApi
     */
    public youtubeControllerUpdateChannel(requestParameters: YouTubeApiYoutubeControllerUpdateChannelRequest, options?: AxiosRequestConfig) {
        return YouTubeApiFp(this.configuration).youtubeControllerUpdateChannel(requestParameters.guildId, options).then((request) => request(this.axios, this.basePath));
    }
}


