// This file is auto-generated by @hey-api/openapi-ts

export type User = {
    id: number;
    discordId: string;
    accessToken: string;
    refreshToken: string;
    username: string;
    discriminator: string;
    avatar: string;
};

export type PartialGuild = {
    id: string;
    name: string;
    icon: string;
    owner: boolean;
    permissions: number;
    features: Array<(string)>;
    isActive: boolean;
};

export type GuildChannel = {
    id: string;
    name: string;
    type: number;
};

export type WelcomeMessage = {
    guildId: string;
    channelId: string;
};

export type CreateMemberCount = {
    channelId: string;
};

export type GuildMemberCount = {
    guildId: string;
    channelId: string;
};

export type YoutubeChannel = {
    guildId: string;
    apiKey: string;
    channelId: string;
    guildChannelId: string;
    roleId: string;
    latestVideoDateTime: string;
    isActive: boolean;
};

export type CreateImageDto = {
    prompt: string;
};

export type ImageDto = {
    url: string;
};

export type BrawlStarsUser = {
    userId: string;
    tag: string;
};

export type AuthControllerLoginData = {
    headers?: {
        token?: unknown;
    };
};

export type AuthControllerLoginResponse = unknown;

export type AuthControllerLoginError = unknown;

export type AuthControllerRedirectData = {
    headers?: {
        token?: unknown;
    };
};

export type AuthControllerRedirectResponse = unknown;

export type AuthControllerRedirectError = unknown;

export type AuthControllerMeData = {
    headers?: {
        token?: unknown;
    };
};

export type AuthControllerMeResponse = User;

export type AuthControllerMeError = unknown;

export type AuthControllerLogoutData = {
    headers?: {
        token?: unknown;
    };
};

export type AuthControllerLogoutResponse = unknown;

export type AuthControllerLogoutError = unknown;

export type DiscordControllerGetGuildsData = {
    headers?: {
        token?: unknown;
    };
};

export type DiscordControllerGetGuildsResponse = Array<PartialGuild>;

export type DiscordControllerGetGuildsError = unknown;

export type DiscordControllerGetGuildDetailsData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type DiscordControllerGetGuildDetailsResponse = PartialGuild;

export type DiscordControllerGetGuildDetailsError = unknown;

export type DiscordControllerGetGuildChannelsData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type DiscordControllerGetGuildChannelsResponse = Array<GuildChannel>;

export type DiscordControllerGetGuildChannelsError = unknown;

export type DiscordControllerGetWelcomeMessageData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type DiscordControllerGetWelcomeMessageResponse = WelcomeMessage;

export type DiscordControllerGetWelcomeMessageError = unknown;

export type DiscordControllerPostMemberCountData = {
    body: CreateMemberCount;
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type DiscordControllerPostMemberCountResponse = GuildMemberCount;

export type DiscordControllerPostMemberCountError = unknown;

export type DiscordControllerGetMemberCountData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type DiscordControllerGetMemberCountResponse = GuildMemberCount;

export type DiscordControllerGetMemberCountError = unknown;

export type YoutubeControllerCreateChannelData = {
    body: YoutubeChannel;
    headers?: {
        token?: unknown;
    };
};

export type YoutubeControllerCreateChannelResponse = YoutubeChannel;

export type YoutubeControllerCreateChannelError = unknown;

export type YoutubeControllerGetChannelsData = {
    headers?: {
        token?: unknown;
    };
};

export type YoutubeControllerGetChannelsResponse = Array<YoutubeChannel>;

export type YoutubeControllerGetChannelsError = unknown;

export type YoutubeControllerGetChannelData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type YoutubeControllerGetChannelResponse = YoutubeChannel;

export type YoutubeControllerGetChannelError = unknown;

export type YoutubeControllerUpdateChannelData = {
    headers?: {
        token?: unknown;
    };
    path: {
        guildId: string;
    };
};

export type YoutubeControllerUpdateChannelResponse = unknown;

export type YoutubeControllerUpdateChannelError = unknown;

export type OpenaiControllerCreateImageData = {
    body: CreateImageDto;
    headers?: {
        token?: unknown;
    };
};

export type OpenaiControllerCreateImageResponse = ImageDto;

export type OpenaiControllerCreateImageError = unknown;

export type BrawlStarsControllerSaveProfileData = {
    body: BrawlStarsUser;
    headers?: {
        token?: unknown;
    };
};

export type BrawlStarsControllerSaveProfileResponse = BrawlStarsUser;

export type BrawlStarsControllerSaveProfileError = unknown;

export type BrawlStarsControllerUpdateProfileData = {
    body: BrawlStarsUser;
    headers?: {
        token?: unknown;
    };
};

export type BrawlStarsControllerUpdateProfileResponse = BrawlStarsUser;

export type BrawlStarsControllerUpdateProfileError = unknown;

export type BrawlStarsControllerGetProfileData = {
    headers?: {
        token?: unknown;
    };
    path: {
        userId: string;
    };
};

export type BrawlStarsControllerGetProfileResponse = BrawlStarsUser;

export type BrawlStarsControllerGetProfileError = unknown;

export type $OpenApiTs = {
    '/api/auth/login': {
        get: {
            req: AuthControllerLoginData;
            res: {
                '200': unknown;
            };
        };
    };
    '/api/auth/redirect': {
        get: {
            req: AuthControllerRedirectData;
            res: {
                '200': unknown;
            };
        };
    };
    '/api/auth/me': {
        get: {
            req: AuthControllerMeData;
            res: {
                default: User;
            };
        };
    };
    '/api/auth/logout': {
        post: {
            req: AuthControllerLogoutData;
            res: {
                '201': unknown;
            };
        };
    };
    '/api/discord/guilds': {
        get: {
            req: DiscordControllerGetGuildsData;
            res: {
                default: Array<PartialGuild>;
            };
        };
    };
    '/api/discord/guilds/{guildId}': {
        get: {
            req: DiscordControllerGetGuildDetailsData;
            res: {
                default: PartialGuild;
            };
        };
    };
    '/api/discord/guilds/{guildId}/channels': {
        get: {
            req: DiscordControllerGetGuildChannelsData;
            res: {
                default: Array<GuildChannel>;
            };
        };
    };
    '/api/discord/guilds/{guildId}/welcome-message': {
        get: {
            req: DiscordControllerGetWelcomeMessageData;
            res: {
                default: WelcomeMessage;
            };
        };
    };
    '/api/discord/guilds/{guildId}/member-count': {
        post: {
            req: DiscordControllerPostMemberCountData;
            res: {
                default: GuildMemberCount;
            };
        };
        get: {
            req: DiscordControllerGetMemberCountData;
            res: {
                default: GuildMemberCount;
            };
        };
    };
    '/api/youtube': {
        post: {
            req: YoutubeControllerCreateChannelData;
            res: {
                default: YoutubeChannel;
            };
        };
    };
    '/api/youtube/channels': {
        get: {
            req: YoutubeControllerGetChannelsData;
            res: {
                default: Array<YoutubeChannel>;
            };
        };
    };
    '/api/youtube/{guildId}': {
        get: {
            req: YoutubeControllerGetChannelData;
            res: {
                default: YoutubeChannel;
            };
        };
    };
    '/api/youtube/channels/{guildId}': {
        put: {
            req: YoutubeControllerUpdateChannelData;
            res: {
                '200': unknown;
            };
        };
    };
    '/api/openai/generate-image': {
        post: {
            req: OpenaiControllerCreateImageData;
            res: {
                default: ImageDto;
            };
        };
    };
    '/api/brawl-stars/save': {
        post: {
            req: BrawlStarsControllerSaveProfileData;
            res: {
                default: BrawlStarsUser;
            };
        };
    };
    '/api/brawl-stars/update': {
        put: {
            req: BrawlStarsControllerUpdateProfileData;
            res: {
                default: BrawlStarsUser;
            };
        };
    };
    '/api/brawl-stars/profile/{userId}': {
        get: {
            req: BrawlStarsControllerGetProfileData;
            res: {
                default: BrawlStarsUser;
            };
        };
    };
};